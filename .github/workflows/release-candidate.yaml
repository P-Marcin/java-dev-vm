name: Build, Test and Push RC Images

on: workflow_dispatch

jobs:
  main:
    name: Build, Test and Push RC Images
    runs-on: ubuntu-latest
    steps:
      - name: Prune Docker
        run: docker system prune --all --volumes --force
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract properties
        run: |
          echo "JDK_VERSION=$(mvn help:evaluate -Dexpression=jdk.version -q -DforceStdout)" >> ${GITHUB_ENV}
          echo "JDK_DISTRIBUTION=$(mvn help:evaluate -Dexpression=jdk.distribution -q -DforceStdout)" >> ${GITHUB_ENV}
          echo "IMAGE_NAMESPACE=$(mvn help:evaluate -Dexpression=image.namespace -q -DforceStdout)" >> ${GITHUB_ENV}
          echo "IMAGE_NAME=$(mvn help:evaluate -Dexpression=image.name -q -DforceStdout)" >> ${GITHUB_ENV}
          echo "IMAGE_VERSION=$(mvn help:evaluate -Dexpression=image.version -q -DforceStdout)" >> ${GITHUB_ENV}
      - name: Set up Oracle JDK
        uses: actions/setup-java@v4
        id: setup-java
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
          cache: maven
      - name: Generate Workflow Stats
        env:
          JDK_VERSION: ${{ steps.setup-java.outputs.version }}
          JDK_DISTRIBUTION: ${{ steps.setup-java.outputs.distribution }}
        run: |
          echo "### Workflow Stats" >> ${GITHUB_STEP_SUMMARY}
          echo "| Tool | Version |" >> ${GITHUB_STEP_SUMMARY}
          echo "| --- | --- |" >> ${GITHUB_STEP_SUMMARY}
          echo "| Java | ${JDK_VERSION}-${JDK_DISTRIBUTION,,} |" >> ${GITHUB_STEP_SUMMARY}
          echo "| Maven | $(mvn --version | grep "Apache Maven" | sed "s/.*Maven //;s/ (.*//") |" >> ${GITHUB_STEP_SUMMARY}
          echo "| Docker Client | $(docker version --format "{{.Client.Version}}") |" >> ${GITHUB_STEP_SUMMARY}
          echo "| Docker Server | $(docker version --format "{{.Server.Version}}") |" >> ${GITHUB_STEP_SUMMARY}
          echo "| Docker Buildx | $(docker buildx version | sed "s/.* v//;s/ .*//") |" >> ${GITHUB_STEP_SUMMARY}
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push RC Community Image
        run: |
          mvn clean install -B -DskipTests -Dimage.version=${IMAGE_VERSION} -Prc,community,github-actions,skip-remove-builder
          df -h | grep -A 1 "Filesystem"; docker system df
      - name: Test RC Community Image
        run: |
          mvn test -B -Dimage.version=${IMAGE_VERSION} -Prc,community,skip-rebuild
          df -h | grep -A 1 "Filesystem"; docker system df
      - name: Remove RC Community Image from local repository
        run: |
          docker image rm ${IMAGE_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}-rc-community
          df -h | grep -A 1 "Filesystem"; docker system df
      - name: Verify Provenance attached to Community Image
        run: |
          docker buildx imagetools inspect ${IMAGE_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}-rc-community \
            --format "{{ json .Provenance.SLSA }}" | grep -q "github.com/${GITHUB_REPOSITORY_OWNER}"
      - name: Verify SBOM attached to Community Image
        run: |
          docker buildx imagetools inspect ${IMAGE_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}-rc-community \
            --format "{{ json .SBOM.SPDX }}" | grep -q "sdkman/candidates/java"
      - name: Build and Push RC Ultimate Image
        run: |
          mvn install -B -DskipTests -Dimage.version=${IMAGE_VERSION} -Prc,ultimate,github-actions,skip-rebuild,prune-builder
          df -h | grep -A 1 "Filesystem"; docker system df
      - name: Test RC Ultimate Image
        run: |
          mvn test -B -Dimage.version=${IMAGE_VERSION} -Prc,ultimate,skip-rebuild
          df -h | grep -A 1 "Filesystem"; docker system df
      - name: Remove RC Ultimate Image from local repository
        run: |
          docker image rm ${IMAGE_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}-rc-ultimate
          df -h | grep -A 1 "Filesystem"; docker system df
      - name: Verify Provenance attached to Ultimate Image
        run: |
          docker buildx imagetools inspect ${IMAGE_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}-rc-ultimate \
            --format "{{ json .Provenance.SLSA }}" | grep -q "github.com/${GITHUB_REPOSITORY_OWNER}"
      - name: Verify SBOM attached to Ultimate Image
        run: |
          docker buildx imagetools inspect ${IMAGE_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}-rc-ultimate \
            --format "{{ json .SBOM.SPDX }}" | grep -q "sdkman/candidates/java"
